<ResourceDictionary
    x:Class="TextEditor.Resources"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:TagStructEditor.Controls;assembly=TagStructEditor"
    xmlns:converters="clr-namespace:TagStructEditor.Converters;assembly=TagStructEditor"
    xmlns:fields="clr-namespace:TagStructEditor.Fields;assembly=TagStructEditor"
    xmlns:local="clr-namespace:DefinitionEditor"
    xmlns:system="clr-namespace:System;assembly=mscorlib"
    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero">



    <!--  Constants  -->
    <system:String x:Key="RealFormatString">{0}</system:String>

    <!--  Styles  -->

    <Style x:Key="ToolBarStyle"
        TargetType="{x:Type Border}">
        <Setter Property="Padding" Value="0,4" />
        <Setter Property="BorderBrush" Value="{DynamicResource BackgroundDark}" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Style.Resources>
            <Style
                BasedOn="{StaticResource {x:Type Button}}"
                TargetType="{x:Type Button}">
                <Setter Property="Focusable" Value="False" />
                <Setter Property="Margin" Value="4,0,0,0" />
                <Setter Property="Padding" Value="10,2" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>
            <Style
                BasedOn="{StaticResource {x:Type Menu}}"
                TargetType="{x:Type Menu}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Style.Resources>
                    <Style
                        BasedOn="{StaticResource {x:Type MenuItem}}"
                        TargetType="{x:Type MenuItem}">
                        <Setter Property="VerticalAlignment" Value="Center" />
                        <Setter Property="HeaderTemplate">
                            <Setter.Value>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock Text="{Binding}" />
                                        <Path
                                            Margin="8,2,0,0"
                                            VerticalAlignment="Center"
                                            Data="M 0 0 L 3 3 L 6 0 Z"
                                            Fill="{DynamicResource Foreground}" />
                                    </StackPanel>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Resources>
                            <Style
                                BasedOn="{StaticResource {x:Type MenuItem}}"
                                TargetType="{x:Type MenuItem}" />
                        </Style.Resources>
                    </Style>
                </Style.Resources>
            </Style>
            <Style
                BasedOn="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}"
                TargetType="{x:Type Separator}" />
        </Style.Resources>
    </Style>

    <Style x:Key="FieldLabelStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="MinWidth" Value="220" />
        <Setter Property="Padding" Value="10,0,10,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style x:Key="FieldTypeLabelStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Margin" Value="3,1,0,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="FontFamily" Value="Bahnschrift" />
        <Setter Property="Foreground" Value="{DynamicResource ForegroundDark}" />
        <Setter Property="Visibility" Value="{Binding TypeNameIsVisible, Converter={x:Static converters:BoolToVisbilityConverter.Instance}}" />
    </Style>

    <Style x:Key="InlineFieldLabelStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Width" Value="auto" />
        <Setter Property="Margin" Value="2,0,2,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="Consolas" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Ideal"/>
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundDark}" />
    </Style>

    <Style x:Key="FieldTextBoxStyle"
        BasedOn="{StaticResource {x:Type TextBox}}"
        TargetType="{x:Type TextBox}">
        <Setter Property="MinWidth" Value="75" />
        <Setter Property="Width" Value="auto" />
        <Setter Property="Height" Value="22" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1.5,0,0,0" />
        <Setter Property="Margin" Value="0,0,0,0" />
    </Style>

    <Style x:Key="InlineFieldTextBoxStyle"
        BasedOn="{StaticResource FieldTextBoxStyle}"
        TargetType="{x:Type TextBox}">
        <Setter Property="MinWidth" Value="80" />
        <Setter Property="Padding" Value="2,0,2,0" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Ideal" />
    </Style>

    <Style x:Key="StringTextBoxStyle"
        BasedOn="{StaticResource {x:Type TextBox}}"
        TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{DynamicResource StringBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource StringBorder}" />
        <Setter Property="MinWidth" Value="260" />
        <Setter Property="Width" Value="auto" />
        <Setter Property="Height" Value="22" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="2,0" />
        <Setter Property="Margin" Value="0,0,0,0" />
    </Style>

    <Style x:Key="StructListBoxStyle" BasedOn="{StaticResource {x:Type ListBox}}" TargetType="{x:Type ListBox}">
        <Setter Property="VirtualizingPanel.ScrollUnit" Value="Pixel" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="Padding" Value="4,4" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style BasedOn="{StaticResource {x:Type ListBoxItem}}" TargetType="{x:Type ListBoxItem}">
                    <Setter Property="Padding" Value="2" />
                    <Setter Property="Focusable" Value="False" />
                    <Setter Property="ListBoxItem.BorderBrush" Value="{x:Null}" />
                    <Setter Property="ListBoxItem.BorderThickness" Value="1" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                <Border
                                    CornerRadius="3"
                                    Padding="{TemplateBinding Padding}"
                                    Background="Transparent"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                    <ContentPresenter />
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsHighlighted}" Value="True">
                            <Setter Property="ListBoxItem.Background" Value="Transparent" />
                            <Setter Property="ListBoxItem.BorderBrush" Value="{DynamicResource ForegroundMedium}" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderStyleBase"
        BasedOn="{StaticResource {x:Type Expander}}"
        TargetType="{x:Type Expander}">
        <Setter Property="BorderBrush" Value="{DynamicResource ExpanderClosedBorder}" />
        <Setter Property="Background" Value="{DynamicResource ExpanderClosedBackground}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Margin" Value="0,0" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="7,0,0,0" />
    </Style>

    <Style x:Key="CachedTagGroupComboBoxToggle" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot"
                        Width="50"
                        Background="{DynamicResource Relief}"
                        BorderBrush="{DynamicResource Relief}"
                        BorderThickness="1,1,1,1"
                        SnapsToDevicePixels="true"
                        CornerRadius="1,0,0,1"
                        Margin="0,0,0,0"
                        Padding="2">
                        <Border x:Name="splitBorder"
                            Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                            Margin="0"
                            HorizontalAlignment="Right"
                            BorderBrush="Transparent"
                            BorderThickness="0"
                            SnapsToDevicePixels="true">
                            <Path x:Name="arrow"
                                Margin="4,0,0,0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Data="M0,0L4,4 8,0z"
                                Fill="{DynamicResource ForegroundDark}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=IsPressed, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="White" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource ForegroundDark}" />
                            <Setter TargetName="splitBorder" Property="Background" Value="{StaticResource ComboBox.Static.Editable.Button.Background}" />
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="{StaticResource ComboBox.Static.Editable.Button.Border}" />
                        </MultiDataTrigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource Accent}" />
                        </Trigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource BorderDark}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource Accent}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource ComboBox.MouseOver.Editable.Background}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource Accent}" />
                            <Setter TargetName="splitBorder" Property="Background" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}" />
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="{DynamicResource Accent}" />
                        </MultiDataTrigger>

                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource Accent}" />
                        </Trigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource BorderDark}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource Accent}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource ComboBox.Pressed.Editable.Background}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource Accent}" />
                            <Setter TargetName="splitBorder" Property="Background" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}" />
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="{DynamicResource Accent}" />
                        </MultiDataTrigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="templateRoot" Property="Background" Value="Transparent" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource Disabled}" />
                            <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource ForegroundDisabled}" />
                        </Trigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource Transparent}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource Background}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource ComboBox.Disabled.Editable.Background}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource Disabled}" />
                        </MultiDataTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CachedTagNameComboBoxToggle" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot"
                        Background="{DynamicResource CachedTagBackground}"
                        BorderBrush="{DynamicResource Relief}"
                        BorderThickness="0,1"
                        SnapsToDevicePixels="true"
                        CornerRadius="0"
                        Margin="0,0,0,0"
                        Padding="1" >
                        <Border x:Name="splitBorder"
                            Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                            Margin="0"
                            HorizontalAlignment="Right"
                            BorderBrush="Transparent"
                            BorderThickness="0"
                            SnapsToDevicePixels="true">
                            <Path x:Name="arrow"
                                Margin="0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Data="M0,0L4,4 8,0z"
                                Fill="{DynamicResource ForegroundDark}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=IsPressed, RelativeSource={RelativeSource Self}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="White" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource ForegroundDark}" />
                            <Setter TargetName="splitBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="Transparent" />
                        </MultiDataTrigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource Foreground}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource Accent}" />
                        </Trigger>
                        
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Panel.ZIndex" Value="1000" />
                            <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource MouseOver}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource Accent}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="Transparent" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource Accent}" />
                            <Setter TargetName="splitBorder" Property="Background" Value="Transparent" />
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="{DynamicResource Accent}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{DynamicResource BorderDark}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource Accent}" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsPressed, RelativeSource={RelativeSource Self}}" Value="true" />
                                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="{StaticResource ComboBox.Pressed.Editable.Background}" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource Accent}" />
                            <Setter TargetName="splitBorder" Property="Background" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}" />
                            <Setter TargetName="splitBorder" Property="BorderBrush" Value="{DynamicResource Accent}" />
                        </MultiDataTrigger>

                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="templateRoot" Property="Background" Value="Transparent" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource Disabled}" />
                            <Setter TargetName="templateRoot" Property="BorderThickness" Value="0,1,0,1" />
                            <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource Disabled}" />
                        </Trigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="Transparent" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource Disabled}" />
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
                                <Condition Binding="{Binding Path=IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true" />
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="templateRoot" Property="Background" Value="Transparent" />
                            <Setter TargetName="templateRoot" Property="BorderBrush" Value="{DynamicResource Disabled}" />
                        </MultiDataTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CachedTagButton" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource Relief}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Relief}" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="true"
                        CornerRadius="0">
                        <ContentPresenter x:Name="contentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Panel.ZIndex" Value="2"/>
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource BorderDark}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Accent}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource Accent}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Accent}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="border" Property="Margin" Value="0,0,-1,0" />
                            <Setter TargetName="border" Property="BorderThickness" Value="0,1,0,1" />
                            <Setter TargetName="border" Property="Background" Value="Transparent" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Disabled}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{DynamicResource Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CachedTagButtonRight" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource Relief}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Relief}" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="true"
                        CornerRadius="0,1,1,0">
                        <ContentPresenter x:Name="contentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Panel.ZIndex" Value="10"/>
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource MouseOver}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Accent}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Panel.ZIndex" Value="10"/>
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource Accent}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Accent}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="border" Property="Margin" Value="0,0,0,0" />
                            <Setter TargetName="border" Property="BorderThickness" Value="0,1,1,1" />
                            <Setter TargetName="border" Property="Background" Value="Transparent" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Disabled}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{DynamicResource Disabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BlockHeaderDropdownComboboxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderDark}" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Padding" Value="7,3" />
        <Setter Property="Opacity" Value="0.95" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Background" Value="{DynamicResource Disabled}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Disabled}" />
                <Setter Property="BorderThickness" Value="0" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!--  Control Templates  -->
    <ControlTemplate x:Key="NoScrollListBoxTemplate"
        TargetType="{x:Type ListBox}">
        <Border
            Padding="{TemplateBinding Padding}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            Focusable="False">
            <ItemsPresenter />
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="InlineNoScrollListBoxTemplate"
        TargetType="{x:Type ListBox}">
        <Border
            CornerRadius="3"
            Padding="{TemplateBinding Padding}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            Focusable="False">
            <ItemsPresenter />
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="CachedTagGroupComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup"
                Grid.ColumnSpan="2"
                Margin="1"
                AllowsTransparency="true"
                IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Placement="Bottom"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <theme:SystemDropShadowChrome x:Name="shadow"
                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                    Color="Transparent">
                    <Border x:Name="dropDownBorder"
                        Background="{DynamicResource SubMenu}"
                        BorderBrush="{DynamicResource MouseOver}"
                        BorderThickness="1">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas"
                                    Width="0"
                                    Height="0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Top">
                                    <Rectangle x:Name="opaqueRect"
                                        Width="{Binding ActualWidth, ElementName=dropDownBorder}"
                                        Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                        Fill="{Binding Background, ElementName=dropDownBorder}" />
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter"
                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </theme:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton"
                Grid.ColumnSpan="2"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource CachedTagGroupComboBoxToggle}" />
            <ContentPresenter x:Name="contentPresenter"
                Margin="{TemplateBinding Padding}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                Content="{TemplateBinding SelectionBoxItem}"
                ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                IsHitTestVisible="false"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
                <Setter TargetName="shadow" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="shadow" Property="Color" Value="{DynamicResource Shadow}" />
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="opaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter TargetName="opaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="CachedTagNameComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup"
                Grid.ColumnSpan="2"
                Margin="1"
                AllowsTransparency="true"
                IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Placement="Bottom"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <theme:SystemDropShadowChrome x:Name="shadow"
                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                    Color="Transparent">
                    <Border x:Name="dropDownBorder"
                        Background="{DynamicResource SubMenu}"
                        BorderBrush="{DynamicResource BorderDark}"
                        BorderThickness="1">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas"
                                    Width="0"
                                    Height="0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Top">
                                    <Rectangle x:Name="opaqueRect"
                                        Width="{Binding ActualWidth, ElementName=dropDownBorder}"
                                        Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                        Fill="{Binding Background, ElementName=dropDownBorder}" />
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter"
                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </theme:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton"
                Grid.ColumnSpan="2"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource CachedTagNameComboBoxToggle}" />
            <ContentPresenter x:Name="contentPresenter"
                Margin="{TemplateBinding Padding}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                Content="{TemplateBinding SelectionBoxItem}"
                ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                IsHitTestVisible="false"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
                <Setter TargetName="shadow" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="shadow" Property="Color" Value="{DynamicResource Shadow}" />
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="opaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter TargetName="opaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup"
                Grid.ColumnSpan="2"
                Margin="1"
                AllowsTransparency="true"
                IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Placement="Bottom"
                PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <theme:SystemDropShadowChrome x:Name="shadow"
                    MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                    Color="Transparent">
                    <Border x:Name="dropDownBorder"
                        Background="{DynamicResource SubMenu}"
                        BorderBrush="{DynamicResource BorderDark}"
                        BorderThickness="1">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas"
                                    Width="0"
                                    Height="0"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Top">
                                    <Rectangle x:Name="opaqueRect"
                                        Width="{Binding ActualWidth, ElementName=dropDownBorder}"
                                        Height="{Binding ActualHeight, ElementName=dropDownBorder}"
                                        Fill="{Binding Background, ElementName=dropDownBorder}" />
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter"
                                    KeyboardNavigation.DirectionalNavigation="Contained"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </theme:SystemDropShadowChrome>
            </Popup>
            <ToggleButton x:Name="toggleButton"
                Grid.ColumnSpan="2"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Style="{StaticResource ComboBoxToggleButton}" />
            <ContentPresenter x:Name="contentPresenter"
                Margin="{TemplateBinding Padding}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                Content="{TemplateBinding SelectionBoxItem}"
                ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                IsHitTestVisible="false"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger SourceName="PART_Popup" Property="HasDropShadow" Value="true">
                <Setter TargetName="shadow" Property="Margin" Value="0,0,5,5" />
                <Setter TargetName="shadow" Property="Color" Value="{DynamicResource Shadow}" />
            </Trigger>
            <Trigger Property="HasItems" Value="false">
                <Setter TargetName="dropDownBorder" Property="Height" Value="95" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
            <Trigger SourceName="DropDownScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                <Setter TargetName="opaqueRect" Property="Canvas.Top" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}" />
                <Setter TargetName="opaqueRect" Property="Canvas.Left" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <!--  Value Field  -->
    <DataTemplate DataType="{x:Type fields:ValueField}">
        <StackPanel x:Name="ValueField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}"/>
            <TextBox
                Style="{StaticResource FieldTextBoxStyle}"
                Text="{Binding Value}" />
            <TextBlock
                Style="{StaticResource FieldTypeLabelStyle}"
                Text="{Binding FieldTypeName}" />
        </StackPanel>
    </DataTemplate>

    <!--  Bool  -->
    <DataTemplate DataType="{x:Type fields:BoolField}">
        <StackPanel x:Name="BoolField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <CheckBox
                Width="100"
                VerticalAlignment="Center"
                IsChecked="{Binding Value}" />
        </StackPanel>
    </DataTemplate>

    <!--  Float32  -->
    <DataTemplate DataType="{x:Type fields:Float32Field}">
        <StackPanel x:Name="Float32Field" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}"/>
            <!--  Value  -->
            <TextBox
                Style="{StaticResource FieldTextBoxStyle}"
                Text="{Binding Value, StringFormat={StaticResource RealFormatString}}" />
            <TextBlock
                Style="{StaticResource FieldTypeLabelStyle}"
                Text="{Binding FieldTypeName}"/>
        </StackPanel>
    </DataTemplate>

    <!--  Float64  -->
    <DataTemplate DataType="{x:Type fields:Float64Field}">
        <StackPanel x:Name="Float64Field" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <!--  Value  -->
            <TextBox
                Style="{StaticResource FieldTextBoxStyle}"
                Text="{Binding Value, StringFormat={StaticResource RealFormatString}}" />

            <TextBlock
                Style="{StaticResource FieldTypeLabelStyle}"
                Text="{Binding FieldTypeName}" />
        </StackPanel>
    </DataTemplate>

    <!--  String  -->
    <DataTemplate DataType="{x:Type fields:StringField}">
        <StackPanel x:Name="StringField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <!--  Value  -->
            <TextBox
                MinWidth="250"
                MaxLength="{Binding MaxLength}"
                Style="{StaticResource StringTextBoxStyle}"
                Text="{Binding Value, ValidatesOnExceptions=True}" />
            <TextBlock
                Style="{StaticResource FieldTypeLabelStyle}"
                Text="{Binding FieldTypeName}" />
        </StackPanel>
    </DataTemplate>

    <!--  StringId  -->
    <DataTemplate DataType="{x:Type fields:StringIdField}">
        <StackPanel x:Name="StringIDField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <!--  Value  -->
            <TextBox
                FontFamily="Consolas"
                Style="{StaticResource StringTextBoxStyle}"
                Text="{Binding Value, ValidatesOnExceptions=True}"/>
            <TextBlock
                Style="{StaticResource FieldTypeLabelStyle}"
                Text="{Binding FieldTypeName}" />
        </StackPanel>
    </DataTemplate>

    <!--  RealArgbColor  -->
    <DataTemplate DataType="{x:Type fields:RealArgbColorField}">
        <StackPanel x:Name="RealARGBField" Orientation="Horizontal">
            <TextBlock Text="{Binding Name, Mode=OneTime}"
                Style="{StaticResource FieldLabelStyle}" />
            <!--  Alpha  -->
            <TextBlock Text="A" Style="{StaticResource InlineFieldLabelStyle}" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Alpha, StringFormat={StaticResource RealFormatString}}" />
            <!--  Red  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="R" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Red, StringFormat={StaticResource RealFormatString}}" />
            <!--  Green  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="G" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Green, StringFormat={StaticResource RealFormatString}}" />
            <!--  Blue  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="B" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Blue, StringFormat={StaticResource RealFormatString}}" />
            <TextBlock
                Style="{StaticResource FieldTypeLabelStyle}"
                Text="{Binding FieldTypeName}" />
        </StackPanel>
    </DataTemplate>

    <!--  RealRgbColor  -->
    <DataTemplate DataType="{x:Type fields:RealRgbColorField}">
        <StackPanel x:Name="RealRGBField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <!--  Red  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="R" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Red, StringFormat={StaticResource RealFormatString}}" />
            <!--  Green  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="G" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Green, StringFormat={StaticResource RealFormatString}}" />
            <!--  Blue  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="B" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Blue, StringFormat={StaticResource RealFormatString}}" />

            <TextBlock
                Style="{StaticResource FieldTypeLabelStyle}"
                Text="{Binding FieldTypeName}" />
        </StackPanel>
    </DataTemplate>

    <!--  ArgbColor  -->
    <DataTemplate DataType="{x:Type fields:ArgbColorField}">
        <StackPanel x:Name="ARGBField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <!--  Alpha  -->
            <TextBlock Text="A" Style="{StaticResource InlineFieldLabelStyle}" />
            <TextBox
                Width="40"
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Alpha}" />
            <!--  Red  -->
            <TextBlock Text="R" Style="{StaticResource InlineFieldLabelStyle}" />
            <TextBox
                Width="40"
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Red}" />
            <!--  Green  -->
            <TextBlock Text="G" Style="{StaticResource InlineFieldLabelStyle}" />
            <TextBox
                Width="40"
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Green}" />
            <!--  Blue  -->
            <TextBlock Text="B" Style="{StaticResource InlineFieldLabelStyle}" />
            <TextBox
                Width="40"
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Blue}" />
            <TextBlock
                Style="{StaticResource FieldTypeLabelStyle}"
                Text="{Binding FieldTypeName}" />
        </StackPanel>
    </DataTemplate>

    <!--  RealPlane2d  -->
    <DataTemplate DataType="{x:Type fields:RealPlane2dField}">
        <StackPanel x:Name="RealPlane2DField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <!--  I  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="I" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding I, StringFormat={StaticResource RealFormatString}}" />
            <!--  J  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="J" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding J, StringFormat={StaticResource RealFormatString}}" />
            <!--  D  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="D" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding D, StringFormat={StaticResource RealFormatString}}" />
            <TextBlock
                Style="{StaticResource FieldTypeLabelStyle}"
                Text="{Binding FieldTypeName}" />
        </StackPanel>
    </DataTemplate>

    <!--  RealPlane3d  -->
    <DataTemplate DataType="{x:Type fields:RealPlane3dField}">
        <StackPanel x:Name="RealPlane3DField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <!--  I  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="I" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding I, StringFormat={StaticResource RealFormatString}}" />
            <!--  J  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="J" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding J, StringFormat={StaticResource RealFormatString}}" />
            <!--  K  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="K" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding K, StringFormat={StaticResource RealFormatString}}" />
            <!--  D  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="D" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding D, StringFormat={StaticResource RealFormatString}}" />
            <TextBlock
                Style="{StaticResource FieldTypeLabelStyle}"
                Text="{Binding FieldTypeName}" />
        </StackPanel>
    </DataTemplate>

    <!--  RealQuaternion  -->
    <DataTemplate DataType="{x:Type fields:RealQuaternionField}">
        <StackPanel x:Name="RealQuaternionField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <!--  I  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="I" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding I, StringFormat={StaticResource RealFormatString}}" />
            <!--  J  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="J" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding J, StringFormat={StaticResource RealFormatString}}" />
            <!--  K  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="K" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding K, StringFormat={StaticResource RealFormatString}}" />
            <!--  W  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="W" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding W, StringFormat={StaticResource RealFormatString}}" />
            <TextBlock
                Style="{StaticResource FieldTypeLabelStyle}"
                Text="{Binding FieldTypeName}" />
        </StackPanel>
    </DataTemplate>

    <!--  RealVector3d  -->
    <DataTemplate DataType="{x:Type fields:RealVector3dField}">
        <StackPanel x:Name="RealVector3DField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <!--  I  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="I" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding I, StringFormat={StaticResource RealFormatString}}" />
            <!--  J  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="J" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding J, StringFormat={StaticResource RealFormatString}}" />
            <!--  K  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="K" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding K, StringFormat={StaticResource RealFormatString}}" />
            <TextBlock
                Style="{StaticResource FieldTypeLabelStyle}"
                Text="{Binding FieldTypeName}" />
        </StackPanel>
    </DataTemplate>

    <!--  RealVector2d  -->
    <DataTemplate DataType="{x:Type fields:RealVector2dField}">
        <StackPanel x:Name="RealVector2DField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <!--  I  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="I" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding I, StringFormat={StaticResource RealFormatString}}" />
            <!--  J  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="J" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding J, StringFormat={StaticResource RealFormatString}}" />
            <TextBlock
                Style="{StaticResource FieldTypeLabelStyle}"
                Text="{Binding FieldTypeName}" />
        </StackPanel>
    </DataTemplate>

    <!--  RealPoint3d  -->
    <DataTemplate DataType="{x:Type fields:RealPoint3dField}">
        <StackPanel x:Name="RealPoint3DField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <!--  X  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="X" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding X, StringFormat={StaticResource RealFormatString}}" />
            <!--  Y  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="Y" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Y, StringFormat={StaticResource RealFormatString}}" />
            <!--  Z  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="Z" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Z, StringFormat={StaticResource RealFormatString}}" />
            <TextBlock
                Style="{StaticResource FieldTypeLabelStyle}"
                Text="{Binding FieldTypeName}" />
        </StackPanel>
    </DataTemplate>

    <!--  RealPoint2d  -->
    <DataTemplate DataType="{x:Type fields:RealPoint2dField}">
        <StackPanel x:Name="RealPoint2DField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <!--  X  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="X" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding X, StringFormat={StaticResource RealFormatString}}" />
            <!--  Y  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="Y" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Y, StringFormat={StaticResource RealFormatString}}" />
            <TextBlock
                Style="{StaticResource FieldTypeLabelStyle}"
                Text="{Binding FieldTypeName}" />
        </StackPanel>
    </DataTemplate>

    <!--  RealEulerAngles3d  -->
    <DataTemplate DataType="{x:Type fields:RealEulerAngles3dField}">
        <StackPanel x:Name="RealEulerAngles3DField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <!--  Yaw  -->
            <TextBlock Text="Yaw"
                Style="{StaticResource InlineFieldLabelStyle}" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Yaw, StringFormat={StaticResource RealFormatString}}" />
            <!--  Pitch  -->
            <TextBlock Text="Pitch"
                Style="{StaticResource InlineFieldLabelStyle}" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Pitch, StringFormat={StaticResource RealFormatString}}" />
            <!--  Roll  -->
            <TextBlock Text="Roll"
                Style="{StaticResource InlineFieldLabelStyle}" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Roll, StringFormat={StaticResource RealFormatString}}" />
            <TextBlock
                Style="{StaticResource FieldTypeLabelStyle}"
                Text="{Binding FieldTypeName}" />
        </StackPanel>
    </DataTemplate>

    <!--  RealEulerAngles2d  -->
    <DataTemplate DataType="{x:Type fields:RealEulerAngles2dField}">
        <StackPanel x:Name="RealEulerAngles2DField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <!--  Yaw  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="Yaw" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Yaw, StringFormat={StaticResource RealFormatString}}" />
            <!--  Pitch  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="Pitch" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Pitch, StringFormat={StaticResource RealFormatString}}" />
            <TextBlock
                Style="{StaticResource FieldTypeLabelStyle}"
                Text="{Binding FieldTypeName}" />
        </StackPanel>
    </DataTemplate>

    <!--  Point2d  -->
    <DataTemplate DataType="{x:Type fields:Point2dField}">
        <StackPanel x:Name="Point2DField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <!--  X  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="X" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding X}" />
            <!--  Y  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="Y" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Y}" />

            <TextBlock
                Style="{StaticResource FieldTypeLabelStyle}"
                Text="{Binding FieldTypeName}" />
        </StackPanel>
    </DataTemplate>

    <!--  Rectangle2d  -->
    <DataTemplate DataType="{x:Type fields:Rectangle2dField}">
        <StackPanel x:Name="Rectangle2DField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <!--  Top  -->
            <TextBlock
                Width="Auto"
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="Right" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Top}" />
            <!--  Left  -->
            <TextBlock
                Width="Auto"
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="Bottom" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Left}" />
            <!--  Bottom  -->
            <TextBlock
                Width="Auto"
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="Left" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Bottom}" />
            <!--  Right  -->
            <TextBlock
                Width="Auto"
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="Top" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Right}" />

            <TextBlock
                Style="{StaticResource FieldTypeLabelStyle}"
                Text="{Binding FieldTypeName}" />
        </StackPanel>
    </DataTemplate>

    <!--  RealRectangle3d  -->
    <DataTemplate DataType="{x:Type fields:RealRectangle3dField}">
        <StackPanel x:Name="RealRectangle3DField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <!--  X0  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="X0" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding X0}" />
            <!--  X1  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="X1" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding X1}" />
            <!--  Y0  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="Y0" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Y0}" />
            <!--  Y1  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="Y1" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Y1}" />
            <!--  Z0  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="Z0" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Z0}" />
            <!--  Z1  -->
            <TextBlock
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="Z1" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Z1}" />

            <TextBlock
                Style="{StaticResource FieldTypeLabelStyle}"
                Text="{Binding FieldTypeName}" />
        </StackPanel>
    </DataTemplate>

    <!--  Enum  -->
    <DataTemplate DataType="{x:Type fields:EnumField}">
        <StackPanel x:Name="EnumField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <ComboBox
                Width="180"
                VerticalAlignment="Center"
                DisplayMemberPath="Name"
                ItemsSource="{Binding Values, Mode=OneTime}"
                SelectedItem="{Binding Value}" />
        </StackPanel>
    </DataTemplate>

    <!--  Flags  -->
    <DataTemplate DataType="{x:Type fields:FlagsField}">
        <StackPanel x:Name="FlagsField" Orientation="Horizontal">
            <TextBlock Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}"
                VerticalAlignment="Top"
                Margin="0,0,0,0" />
            <ListBox ItemsSource="{Binding Flags, Mode=OneTime}"
                Padding="1,2,1,10"
                MinWidth="200"
                MaxHeight="160"
                Background="Transparent"
                ScrollViewer.VerticalScrollBarVisibility="Auto"
                SnapsToDevicePixels="True">
                <ListBox.ItemContainerStyle>
                    <Style
                        BasedOn="{StaticResource {x:Type ListBoxItem}}"
                        TargetType="{x:Type ListBoxItem}">
                        <Setter Property="Focusable" Value="False" />
                        <Setter Property="Padding" Value="0,0,3,0" />
                    </Style>
                </ListBox.ItemContainerStyle>
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <CheckBox
                            VerticalAlignment="Center"
                            VerticalContentAlignment="Center"
                            HorizontalAlignment="Stretch"
                            Content="{Binding Name, Mode=OneTime}"
                            IsChecked="{Binding IsChecked}" />
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
        </StackPanel>
    </DataTemplate>

    <!--  CachedTag  -->
    <DataTemplate DataType="{x:Type fields:CachedTagField}">
        <StackPanel x:Name="CachedTagField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <ComboBox x:Name="TagGroup"
                Panel.ZIndex="1"
                Width="50"
                Height="24"
                Padding="4,0,1,1"
                VerticalAlignment="Center"
                VerticalContentAlignment="Center"
                DisplayMemberPath="TagAscii"
                ToolTip="{Binding SelectedGroupName}"
                ItemsSource="{Binding Groups, Mode=OneTime}"
                SelectedItem="{Binding SelectedGroup}" 
                Template="{StaticResource CachedTagGroupComboBoxTemplate}" />
            <ComboBox x:Name="Tag"
                Width="330"
                Height="24"
                Margin="0,0,0,0"
                Padding="4,3.3,0,0"
                VerticalAlignment="Center"
                ContextMenuService.ShowOnDisabled="True"
                DisplayMemberPath="Name"
                IsEnabled="{Binding SelectedGroupValid}"
                ItemsSource="{Binding SelectedGroup.Instances}"
                SelectedItem="{Binding SelectedInstance}"
                ToolTip="{Binding SelectedInstanceName}"
                VirtualizingPanel.IsVirtualizing="True"
                VirtualizingPanel.ScrollUnit="Item"
                VirtualizingPanel.VirtualizationMode="Standard"
                Template="{StaticResource CachedTagNameComboBoxTemplate}">
                <ComboBox.Resources>
                    <Style TargetType="ScrollViewer">
                        <Setter Property="Width" Value="600" />
                        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" />
                    </Style>
                </ComboBox.Resources>
                <ComboBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <VirtualizingStackPanel />
                    </ItemsPanelTemplate>
                </ComboBox.ItemsPanel>
                <ComboBox.ContextMenu>
                    <ContextMenu>
                        <Separator />
                        <MenuItem Command="{Binding CopyTagNameCommand}" Header="Copy Tag Name" />
                        <MenuItem Command="{Binding CopyTagIndexCommand}" Header="Copy Tag Index" />
                        <MenuItem Command="{Binding PasteTagNameCommand}" Header="Paste Tag Name" />
                        <Separator />
                        <MenuItem Command="{Binding GotoCommand}" Header="Open in a new tab" />
                        <Separator />
                        <MenuItem Command="{Binding BrowseCommand}" Header="Browse" ToolTip="Select a tag" />
                        <MenuItem Command="{Binding NullCommand}" Header="Null" ToolTip="Null this tag reference" />
                    </ContextMenu>
                </ComboBox.ContextMenu>
            </ComboBox>
            <Button x:Name="BrowseButton" Style="{StaticResource CachedTagButton}"
                Panel.ZIndex="3"
                Width="24" Height="24"
                Margin="0,0,0,0" Padding="3,0,4,2"
                VerticalAlignment="Center"
                VerticalContentAlignment="Center"
                Command="{Binding BrowseCommand}"
                FontSize="14" FontFamily="Segoe UI"
                Content="⋯" ToolTip="Select a tag from the Tag Browser.">
            </Button>
            <Button x:Name="NullButton" Style="{StaticResource CachedTagButton}"
                Panel.ZIndex="2"
                Width="24" Height="24"
                Margin="0,0,0,0" Padding="3,3,4,4"
                VerticalAlignment="Center"
                VerticalContentAlignment="Center"
                Command="{Binding NullCommand}"
                FontSize="12" FontFamily="Segoe UI"
                Content="Ø" ToolTip="Null this tag reference." />
            <Button x:Name="GoToButton" Style="{StaticResource CachedTagButtonRight}"
                Panel.ZIndex="1"
                Height="24"
                Margin="0,0,0,0" Padding="3,3,4,4"
                VerticalAlignment="Stretch"
                VerticalContentAlignment="Stretch"
                Command="{Binding GotoCommand}"
                FontSize="18" FontFamily="Segoe UI"
                ToolTip="Open this tag in a new tab.">
                <Button.ContentTemplate>
                    <DataTemplate>
                        <TextBlock
                            Margin="0,-5,0,0"
                            Text="➝" />
                    </DataTemplate>
                </Button.ContentTemplate>
            </Button>
        </StackPanel>
    </DataTemplate>

    <!--  GroupTag  -->
    <DataTemplate DataType="{x:Type fields:GroupTagField}">
        <StackPanel x:Name="GroupTagField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <ComboBox
                Width="60"
                VerticalAlignment="Center"
                ItemsSource="{Binding Tags, Mode=OneTime}"
                SelectedValue="{Binding Value}" />
        </StackPanel>
    </DataTemplate>

    <!--  CacheAddress  -->
    <DataTemplate DataType="{x:Type fields:CacheAddressField}">
        <StackPanel x:Name="CacheAddressField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <ComboBox
                VerticalAlignment="Center"
                DisplayMemberPath="Name"
                ItemsSource="{Binding AddressTypes, Mode=OneTime}"
                SelectedItem="{Binding AddressType}" />
            <TextBlock
                Width="Auto"
                Margin="4,0"
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="Offset:" />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding AddressOffset}" />
        </StackPanel>
    </DataTemplate>

    <!--  DatumHandle  -->
    <DataTemplate DataType="{x:Type fields:DatumHandleField}">
        <StackPanel x:Name="DatumHandleField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <!--  Salt  -->
            <TextBlock
                Width="Auto"
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="Salt: " />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Salt}" />
            <!--  Index  -->
            <TextBlock
                Width="Auto"
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="Index: " />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Index}" />
        </StackPanel>
    </DataTemplate>

    <!--  TagBlockIndex  -->
    <DataTemplate DataType="{x:Type fields:TagBlockIndexField}">
        <StackPanel x:Name="TagBlockIndexField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <!--  Offset  -->
            <TextBlock
                Width="Auto"
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="Offset: " />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Offset}" />
            <!--  Count  -->
            <TextBlock
                Width="Auto"
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="Count: " />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding Count}" />
        </StackPanel>
    </DataTemplate>

    <!--  IndexBufferIndex  -->
    <DataTemplate DataType="{x:Type fields:IndexBufferIndexField}">
        <StackPanel Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}"/>
            <TextBox
                Style="{StaticResource FieldTextBoxStyle}"
                Text="{Binding Value}" />
            <TextBlock
                Style="{StaticResource FieldTypeLabelStyle}"
                Text="{Binding FieldTypeName}" />
        </StackPanel>
    </DataTemplate>

    <!--  PlaneReference  -->
    <DataTemplate DataType="{x:Type fields:PlaneReferenceField}">
        <StackPanel Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <!--  Triangle Index  -->
            <TextBlock
                Width="Auto"
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="Triangle: " />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding TriangleIndex}" />
            <!--  Cluster Index  -->
            <TextBlock
                Width="Auto"
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="Cluster: " />
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding ClusterIndex}" />
        </StackPanel>
    </DataTemplate>

    <!--  PackedSamplerAddressMode  -->
    <DataTemplate DataType="{x:Type fields:PackedSamplerAddressModeField}">
        <StackPanel x:Name="PackedSamplerAddressModeField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <!--  AddressU  -->
            <TextBlock
                Width="Auto"
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="Address U: " />
            <ComboBox
                Width="132"
                VerticalAlignment="Center"
                DisplayMemberPath="Name"
                ItemsSource="{Binding Values, Mode=OneTime}"
                SelectedItem="{Binding ValueU}"/>
            <!--  AddressV  -->
            <TextBlock
                Width="Auto"
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="Address V: "
                Padding="2"/>
            <ComboBox
                Width="132"
                VerticalAlignment="Center"
                DisplayMemberPath="Name"
                ItemsSource="{Binding Values, Mode=OneTime}"
                SelectedItem="{Binding ValueV}" />
        </StackPanel>
    </DataTemplate>

    <!--  PackedSamplerFilterMode  -->
    <DataTemplate DataType="{x:Type fields:PackedSamplerFilterModeField}">
        <StackPanel x:Name="PackedSamplerFilterModeField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <!--  Filter Mode  -->
            <TextBlock
                Width="Auto"
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="Filter Mode: " />
            <ComboBox
                Width="150"
                VerticalAlignment="Center"
                DisplayMemberPath="Name"
                ItemsSource="{Binding FilterModeValues, Mode=OneTime}"
                SelectedItem="{Binding ValueFilterMode}"/>
            <!--  Anisotropy  -->
            <TextBlock
                Width="Auto"
                Style="{StaticResource InlineFieldLabelStyle}"
                Text="Anisotropy: "
                Padding="2"/>
            <TextBox
                Style="{StaticResource InlineFieldTextBoxStyle}"
                Text="{Binding ValueAnisotropy}" />
        </StackPanel>
    </DataTemplate>

    <!--  Bsp3dNode  -->
    <DataTemplate DataType="{x:Type fields:Bsp3dNodeField}">
        <StackPanel x:Name="BSP3DField" Orientation="Horizontal">
            <TextBlock
                Style="{StaticResource FieldLabelStyle}"
                Text="{Binding Name, Mode=OneTime}" />
            <StackPanel Orientation="Vertical">
                <StackPanel
                    Margin="0,2"
                    Orientation="Horizontal">
                    <!--  Value  -->
                    <TextBlock
                        Width="80"
                        Style="{StaticResource FieldLabelStyle}"
                        Text="[Value]" />
                    <TextBox
                        Width="120"
                        IsReadOnly="True"
                        Style="{StaticResource FieldTextBoxStyle}"
                        Text="{Binding Value, StringFormat={}{0:X016}}" />
                </StackPanel>
                <StackPanel
                    Margin="0,2"
                    Orientation="Horizontal">
                    <!--  Plane  -->
                    <TextBlock
                        Width="80"
                        Style="{StaticResource FieldLabelStyle}"
                        Text="[Plane]" />
                    <TextBox
                        Width="120"
                        Style="{StaticResource FieldTextBoxStyle}"
                        Text="{Binding Plane}" />
                </StackPanel>
                <StackPanel
                    Margin="0,2"
                    Orientation="Horizontal">
                    <!--  Front Child  -->
                    <TextBlock
                        Width="80"
                        Style="{StaticResource InlineFieldLabelStyle}"
                        Text="[Front Child]" />
                    <TextBlock
                        Width="Auto"
                        Style="{StaticResource InlineFieldLabelStyle}"
                        Text="Type:" />
                    <ComboBox
                        Width="60"
                        Margin="2,0"
                        VerticalAlignment="Center"
                        ItemsSource="{Binding Source={local:EnumBindingSource {x:Static fields:Bsp3dNodeField.ChildTypeEnum}}}"
                        SelectedValue="{Binding FrontChildType}" />
                    <TextBlock
                        Width="Auto"
                        Margin="8,0,0,0"
                        Style="{StaticResource InlineFieldLabelStyle}"
                        Text="Index:" />
                    <TextBox
                        Margin="4,0"
                        Style="{StaticResource InlineFieldTextBoxStyle}"
                        Text="{Binding FrontChildIndex}" />

                </StackPanel>
                <StackPanel
                    Margin="0,2"
                    Orientation="Horizontal">
                    <!--  Back Child  -->
                    <TextBlock
                        Width="80"
                        Style="{StaticResource InlineFieldLabelStyle}"
                        Text="[Back Child]" />
                    <TextBlock
                        Width="Auto"
                        Style="{StaticResource InlineFieldLabelStyle}"
                        Text="Type:" />
                    <ComboBox
                        Width="60"
                        Margin="2,0"
                        VerticalAlignment="Center"
                        ItemsSource="{Binding Source={local:EnumBindingSource {x:Static fields:Bsp3dNodeField.ChildTypeEnum}}}"
                        SelectedValue="{Binding BackChildType}" />
                    <TextBlock
                        Width="Auto"
                        Margin="8,0,0,0"
                        Style="{StaticResource InlineFieldLabelStyle}"
                        Text="Index:" />
                    <TextBox
                        Margin="4,0"
                        Style="{StaticResource InlineFieldTextBoxStyle}"
                        Text="{Binding BackChildIndex}" />

                </StackPanel>
            </StackPanel>
        </StackPanel>
    </DataTemplate>

    <!--  Data  -->
    <DataTemplate DataType="{x:Type fields:DataField}">
        <Expander x:Name="FunctionExpander"
            Style="{StaticResource ExpanderStyleBase}"
            Header="{Binding}"
            IsExpanded="{Binding IsExpanded}">
            <Expander.HeaderTemplate>
                <DataTemplate>
                    <TextBlock
                        MinWidth="170"
                        Padding="0,3,9,4"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Text="{Binding Name, Mode=OneTime}" />
                </DataTemplate>
            </Expander.HeaderTemplate>
            <Border Padding="0,0,0,1">
                <StackPanel Orientation="Horizontal">
                    <StackPanel Orientation="Vertical">
                        <TextBox x:Name="ValueTextBox"
                            Style="{StaticResource InlineFieldTextBoxStyle}"
                            FontFamily="Consolas"
                            TextOptions.TextRenderingMode="ClearType"
                            Width="325"
                            MinHeight="60"
                            Padding="2"
                            Margin="0"
                            ScrollViewer.VerticalScrollBarVisibility="Visible"
                            TextWrapping="Wrap"
                            Background="{DynamicResource Struct}"/>
                        <StackPanel Height="16"
                            Margin="0,4,0,0"
                            HorizontalAlignment="Right"
                            Orientation="Horizontal">
                            <TextBlock
                                Width="Auto"
                                Margin="4,-1,4,0"
                                VerticalAlignment="Center"
                                Style="{StaticResource InlineFieldLabelStyle}"
                                Text="Size:" />
                            <TextBox x:Name="DataTextBox"
                                Width="Auto"
                                MinWidth="10"
                                Margin="2,-1"
                                Padding="1,0,1,0"
                                VerticalAlignment="Center"
                                Focusable="False"
                                VerticalContentAlignment="Center"
                                IsReadOnly="True"
                                Text="{Binding Path=Length, Mode=OneWay, StringFormat={}0x{0:X}}"
                                TextWrapping="Wrap"
                                Background="{DynamicResource BackgroundDark}"/>
                            <Button Command="{Binding ImportCommand}"
                                Background="{DynamicResource Relief}"
                                Margin="0,-1"
                                Padding="5,0,6,0"
                                VerticalAlignment="Center"
                                Content="Import" />
                            <Button Command="{Binding ExportCommand}"
                                Background="{DynamicResource Relief}"
                                Margin="2,-1"
                                Padding="5,0,6,0"
                                VerticalAlignment="Center" 
                                Content="Export" />
                        </StackPanel>
                    </StackPanel>
                </StackPanel>
            </Border>
        </Expander>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding IsExpanded}" Value="True">
                <Setter TargetName="ValueTextBox" Property="Text" Value="{Binding Path=Data, Converter={x:Static converters:HexValueConverter.Instance}, ValidatesOnExceptions=True}" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--  Struct  -->
    <DataTemplate DataType="{x:Type fields:StructField}">
        <ListBox x:Name="StructListBox"
            BorderThickness="0"
            ItemsSource="{Binding Fields}"
            Style="{StaticResource StructListBoxStyle}" />
    </DataTemplate>

    <!--  Inline Struct  -->
    <DataTemplate DataType="{x:Type fields:InlineStructField}">
        <Expander x:Name="InlineStructExpander"
            Style="{StaticResource ExpanderStyleBase}"
            MinWidth="298"
            Header="{Binding}"
            IsExpanded="{Binding IsExpanded}"
            Background="{DynamicResource ExpanderClosedBackground}">
            <Expander.HeaderTemplate>
                <DataTemplate>
                    <TextBlock
                        MinWidth="180"
                        Padding="0,0"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Text="{Binding Name, Mode=OneTime}" />
                </DataTemplate>
            </Expander.HeaderTemplate>
            <Border Background="Transparent" x:Name="InlineStructBorder" CornerRadius="3" >
                <ListBox x:Name="InlineStructListBox"
                    Background="{DynamicResource Struct}"
                    Margin="-1,0,-1,-1"
                    Padding="0,5,5,5"
                    ItemsSource="{Binding Fields}"
                    Style="{StaticResource StructListBoxStyle}"
                    Template="{StaticResource InlineNoScrollListBoxTemplate}" />
            </Border>
        </Expander>
    </DataTemplate>

    <!--  Block  -->
    <DataTemplate DataType="{x:Type fields:BlockField}">
        <!--  We want to distinguish between the root StructField and block templates  -->
        <DataTemplate.Resources>
            <DataTemplate DataType="{x:Type fields:StructField}">
                <ListBox
                    Margin="0"
                    Padding="0"
                    Background="{DynamicResource Struct}"
                    ItemsSource="{Binding Fields}"
                    Style="{StaticResource StructListBoxStyle}"
                    Template="{StaticResource NoScrollListBoxTemplate}" />
            </DataTemplate>
        </DataTemplate.Resources>

        <Expander x:Name="Expander"
            Style="{StaticResource ExpanderStyleBase}"
            BorderBrush="{DynamicResource BorderDark}"
            ContextMenuService.ShowOnDisabled="True"
            Header="{Binding}"
            IsExpanded="{Binding IsExpanded}"
            MinWidth="360">
            <Expander.ContextMenu>
                <ContextMenu>
                    <MenuItem Command="{Binding AddCommand, Mode=OneTime}"
                        Header="Add" ToolTip="Add a new element" />
                    <MenuItem Command="{Binding InsertCommand, Mode=OneTime}"
                        Header="Insert" ToolTip="Insert a new element at the current index" />
                    <MenuItem Command="{Binding DuplicateCommand, Mode=OneTime}"
                        Header="Duplicate" ToolTip="Duplicate the element at the current index" />
                    <MenuItem Command="{Binding DeleteCommand, Mode=OneTime}"
                        Header="Delete" ToolTip="Delete the element at the current index" />
                    <Separator />
                    <MenuItem Command="{Binding ShiftUpCommand, Mode=OneTime}"
                        Header="Shift Up" ToolTip="Shift the current element up one" />
                    <MenuItem Command="{Binding ShiftDownCommand, Mode=OneTime}"
                        Header="Shift Down" ToolTip="Shift the current element down one" />
                    <Separator />
                    <MenuItem Command="{Binding DeleteAllCommand, Mode=OneTime}"
                        Header="Delete All" ToolTip="Delete all elements" />
                    <Separator />
                    <MenuItem Command="{Binding CollapseAllCommand, Mode=OneTime}"
                        Header="Collapse All" ToolTip="Collapse all children" />
                    <MenuItem Command="{Binding ExpandAllCommand, Mode=OneTime}"
                        Header="Expand All" ToolTip="Expand all children" />
                </ContextMenu>
            </Expander.ContextMenu>
            <!--  Header  -->
            <Expander.HeaderTemplate>
                <DataTemplate>
                    <Grid HorizontalAlignment="{Binding HorizontalAlignment, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWayToSource}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition
                                Width="*"
                                MinWidth="250" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <!--  Name  -->
                        <TextBlock x:Name="HeaderText"
                            MinWidth="180"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Text="{Binding Name, Mode=OneTime}" />
                        <StackPanel
                            Grid.Column="1"
                            VerticalAlignment="Center"
                            Orientation="Horizontal">
                            <controls:BlockHeaderDropdown
                                Count="{Binding Block.Count}"
                                CurrentIndex="{Binding CurrentIndex, Mode=TwoWay}" />
                        </StackPanel>
                    </Grid>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding CurrentIndex}" Value="-1">
                            <Setter Property="IsEnabled" Value="False" />
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Expander.HeaderTemplate>
            <!--  Template  -->
            <Border
                Padding="0,5,5,5"
                Background="{DynamicResource Struct}"
                CornerRadius="3">
                <ContentPresenter Content="{Binding Template, Mode=OneTime}" />
            </Border>
        </Expander>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding CurrentIndex}" Value="-1">
                <Setter Property="Expander.IsEnabled" Value="False" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--  BlockHeaderDropdown  -->
    <Style TargetType="{x:Type controls:BlockHeaderDropdown}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:BlockHeaderDropdown}">
                    <!--  Binding the count to the tag for use in the item template yields better performance than RelativeSource bindings  -->
                    <ComboBox x:Name="PART_Combo"
                        Style="{DynamicResource BlockHeaderDropdownComboboxStyle}"
                        Width="Auto"
                        MinWidth="60"
                        Margin="2,0"
                        Padding="6,2,0,2"
                        SelectedValue="{Binding Path=CurrentIndex, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                        SelectedValuePath=""
                        Tag="{Binding Path=Count, RelativeSource={RelativeSource Mode=TemplatedParent}, Mode=OneWay}">
                        <ComboBox.ItemsPanel>
                            <ItemsPanelTemplate>
                                <VirtualizingStackPanel />
                            </ItemsPanelTemplate>
                        </ComboBox.ItemsPanel>
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock>
                                    <Run Text="{Binding Mode=OneWay}"/>
                                    <Run Text="("/><Run Text="{Binding Path=Tag, ElementName=PART_Combo, Mode=OneWay}"/><Run Text=")"/>
                                </TextBlock>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  StructEditorControl  -->
    <Style TargetType="{x:Type controls:StructEditorControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:StructEditorControl}">
                    <ContentPresenter Content="{TemplateBinding Field}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Block Editor  -->
    <DataTemplate DataType="{x:Type local:BlockEditorViewModel}">
        <DockPanel>
            <Border
                Padding="4,4"
                Background="Transparent"
                BorderBrush="{DynamicResource BorderDarker}"
                DockPanel.Dock="Top"
                Style="{StaticResource ToolBarStyle}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <StackPanel
                        Grid.Column="0"
                        HorizontalAlignment="Stretch"
                        Orientation="Horizontal">
                        <Button Command="{Binding Field.AddCommand, Mode=OneTime}"
                            Content="Add"
                            Focusable="False"
                            ToolTip="Add a new element" />
                        <Button Command="{Binding Field.InsertCommand, Mode=OneTime}"
                            Content="Insert"
                            Focusable="False"
                            ToolTip="Insert a new element at the current index" />
                        <Button Command="{Binding Field.DuplicateCommand}"
                            Content="Duplicate"
                            Focusable="False"
                            ToolTip="Duplicate the element at the current index" />
                        <Button Command="{Binding Field.DeleteCommand, Mode=OneTime}"
                            Content="Delete"
                            Focusable="False"
                            ToolTip="Delete the element at the current index" />
                        <Button Command="{Binding Field.DeleteAllCommand, Mode=OneTime}"
                            Content="Delete All"
                            ToolTip="Delete all elements" />
                        <Separator />
                        <Button Command="{Binding Field.ShiftUpCommand, Mode=OneTime}"
                            Content="Shit Up"
                            Focusable="False"
                            ToolTip="Shift the current element up one" />
                        <Button Command="{Binding Field.ShiftDownCommand, Mode=OneTime}"
                            Content="Shift Down"
                            Focusable="False"
                            ToolTip="Shift the current element down one" />
                    </StackPanel>
                    <StackPanel
                        Grid.Column="1"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Center"
                        ToolBarTray.IsLocked="True">
                        <StackPanel Orientation="Horizontal">
                            <controls:BlockHeaderDropdown
                                x:Name="ElementDropDown"
                                Count="{Binding Field.Block.Count}"
                                CurrentIndex="{Binding Field.CurrentIndex, Mode=TwoWay}" />
                        </StackPanel>
                    </StackPanel>
                </Grid>
            </Border>
            <ContentPresenter x:Name="Template"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Content="{Binding Template}" />
        </DockPanel>

        <DataTemplate.Triggers>
            <DataTrigger
                Binding="{Binding Field.CurrentIndex}"
                Value="-1">
                <Setter TargetName="Template" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="ElementDropDown" Property="IsEnabled" Value="False" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

</ResourceDictionary>
