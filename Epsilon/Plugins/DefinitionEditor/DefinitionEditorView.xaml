<UserControl
    x:Class="DefinitionEditor.DefinitionEditorView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:TagStructEditor="https://github.com/unk-1/tag-struct-editor"
    xmlns:local="clr-namespace:DefinitionEditor"
    xmlns:xcad1="https://github.com/canton7/Stylet"
    Background="Transparent"
    SnapsToDevicePixels="True">

    <UserControl.Resources>
        <xcad1:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />

        <Style x:Key="ToolbarSearchBoxStyle" TargetType="{x:Type TextBoxBase}">
            <Setter Property="Background" Value="{DynamicResource SearchBoxBackground}" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="FontSize" Value="13" />
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="AllowDrop" Value="true" />
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
            <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
            <Setter Property="Validation.ErrorTemplate">
                <Setter.Value>
                    <ControlTemplate />
                </Setter.Value>
            </Setter>
            <Setter Property="ContextMenu">
                <Setter.Value>
                    <ContextMenu>
                        <MenuItem Command="Cut" Header="Cut" Visibility="{Binding Path=IsEnabled, 
                            RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}" />
                        <MenuItem Command="Copy" Header="Copy" Visibility="{Binding Path=IsEnabled, 
                            RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}" />
                        <MenuItem Command="Paste" Header="Paste" />
                    </ContextMenu>
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBoxBase}">
                        <Border x:Name="border"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            CornerRadius="0,0,0,0"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                            <Grid>
                                <ScrollViewer x:Name="PART_ContentHost"
                                    Focusable="false"
                                    HorizontalScrollBarVisibility="Hidden"
                                    VerticalScrollBarVisibility="Hidden" />
                                <TextBlock x:Name="PlaceholderText"
                                    Margin="7,2,2,2"
                                    VerticalAlignment="Center"
                                    FontSize="{TemplateBinding FontSize}"
                                    Foreground="{DynamicResource ForegroundDark}"
                                    IsHitTestVisible="False"
                                    Text="{TemplateBinding Tag}"
                                    Visibility="Hidden" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="border" Property="Opacity" Value="0.56" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="border" Property="Background" Value="{DynamicResource MouseOver}" />
                            </Trigger>
                            <Trigger Property="TextBox.Text" Value="">
                                <Setter TargetName="PlaceholderText" Property="Visibility" Value="Visible" />
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter TargetName="border" Property="Background" Value="{DynamicResource MouseOver}" />
                                <Setter TargetName="PlaceholderText" Property="Visibility" Value="Hidden" />
                            </Trigger>
                            <Trigger Property="Validation.HasError" Value="true">
                                <Setter TargetName="border" Property="BorderBrush" Value="Red" />
                            </Trigger>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                        <Condition Property="IsSelectionActive" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="ToolbarButtonStyle" TargetType="{x:Type ButtonBase}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Height" Value="23" />
            <Setter Property="Padding" Value="1" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ButtonBase}">
                        <Border x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="true"
                        CornerRadius="0">
                            <ContentPresenter x:Name="contentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Button.IsDefaulted" Value="true">
                                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="border" Property="Background" Value="{DynamicResource BorderDark}" />
                                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Accent}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="border" Property="Background" Value="{DynamicResource Accent}" />
                                <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Accent}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="border" Property="Background" Value="{DynamicResource ShadowBrush}" />
                                <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ForegroundDark}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
    </UserControl.Resources>

    <DockPanel Margin="0,0,-0.1,0" x:Name="DefinitionDockPanel" KeyDown="DefinitionContent_KeyDown">
        <!--  Toolbar  -->
        <Border x:Name="Toolbar"
            Height="25"
            Padding="0,0,0,0"
            CornerRadius="0,1,0,0"
            Background="{DynamicResource Inset}"
            BorderBrush="{DynamicResource StringBackground}"
            BorderThickness="0,0,0,0"
            DockPanel.Dock="Top"
            Style="{StaticResource ToolBarStyle}">
            <Grid DockPanel.Dock="Top" x:Name="ToolbarGrid">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <!--  Search  -->
                <StackPanel x:Name="ToolbarSearch"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Center">
                    <StackPanel Orientation="Horizontal">
                        <TextBox x:Name="SearchBox"
                            Style="{StaticResource ToolbarSearchBoxStyle}"
                            MinWidth="205"
                            VerticalAlignment="Center"
                            Tag="Search definition ..."
                            Padding="3,0,0,0"
                            Margin="0,0,0,0"
                            Height="23"
                            VerticalContentAlignment="Center"
                            Text="{Binding SearchQuery, UpdateSourceTrigger=PropertyChanged}">
                            <TextBox.InputBindings>
                                <KeyBinding Key="Up" Command="{Binding SearchResults.PreviousCommand}" />
                                <KeyBinding Key="Down" Command="{Binding SearchResults.NextCommand}" />
                            </TextBox.InputBindings>
                        </TextBox>
                        <Separator Opacity="0" Width="5"/>
                        <ComboBox x:Name="SearchResults"
                            MinWidth="0"
                            Background="{DynamicResource BackgroundDark}"
                            BorderThickness="0"
                            Height="22"
                            Margin="1,-1,4,0"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Center"
                            DisplayMemberPath="FieldName"
                            IsEnabled="{Binding SearchResults.HasResults, FallbackValue=False}"
                            ItemsSource="{Binding SearchResults.Results, Mode=OneWay}"
                            SelectedIndex="{Binding SearchResults.CurrentIndex, Mode=TwoWay}" />
                    </StackPanel>
                </StackPanel>

                <!--  Action Pane  -->
                <StackPanel x:Name="ToolbarActionPane"
                    Grid.Column="1"
                    VerticalAlignment="Stretch"
                    Orientation="Horizontal">
                    <ComboBox
                        MinWidth="30"
                        MaxHeight="20"
                        Margin="0,-1,1,0"
                        DisplayMemberPath="DisplayName"
                        BorderThickness="0"
                        IsEnabled="{Binding RteHasTargets, FallbackValue=False}"
                        ItemsSource="{Binding RteTargetList}"
                        SelectedItem="{Binding SelectedRteTargetItem, Mode=TwoWay}" />
                    <Button Command="{Binding PokeCommand}"
                        ToolTip="Poke the current changes."
                        Content="Poke"
                        Style="{StaticResource ToolbarButtonStyle}"
                        Height="23"
                        Margin="0,-1,0,0"
                        Width="40"
                        VerticalAlignment="Center"
                        VerticalContentAlignment="Center"
                        BorderThickness="0" />
                    <Button Command="{Binding ReloadCommand}"
                        ToolTip="Reload this tag from disk." 
                        Content="Reload"
                        Style="{StaticResource ToolbarButtonStyle}"
                        Height="23"
                        Margin="1,-1,0,0"
                        Width="48"
                        VerticalAlignment="Center"
                        BorderThickness="0" />
                    <Button Command="{Binding SaveCommand}"
                        ToolTip="Save tag changes."
                        Content="Save"
                        Style="{StaticResource ToolbarButtonStyle}"
                        Height="23"
                        Margin="1,-1,0,0"
                        Width="38"
                        VerticalAlignment="Center"
                        VerticalContentAlignment="Center"
                        BorderThickness="0" />
                    <StackPanel
                        VerticalAlignment="Stretch"
                        Orientation="Horizontal">
                        <!--  Options menu  -->
                        <Menu VerticalAlignment="Center" Height="25" Margin="0,0,-1,0">
                            <MenuItem Header="☰">
                                <MenuItem Command="{Binding ExpandAllCommand}"
                                          Header="Expand All" />
                                <MenuItem Command="{Binding CollapseAllCommand}"
                                          Header="Collapse All" />
                                <Separator />
                                <MenuItem Header="Block Outline"
                                    IsCheckable="True"
                                    IsChecked="{Binding BlockOutlineVisible, Mode=TwoWay}"
                                    ToolTip="Show the block outline window" />
                                <Separator />
                                <MenuItem Header="Auto Poke"
                                    IsCheckable="True"
                                    IsChecked="{Binding Preferences.AutoPokeEnabled, Mode=TwoWay}"
                                    ToolTip="Poke tag changes automatically." />
                            </MenuItem>
                        </Menu>
                    </StackPanel>
                </StackPanel>
            </Grid>
        </Border>

        <!--  Main Content  -->
        <Grid x:Name="DefinitionContent" >
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <!--  Block Outline  -->
            <Grid
                Grid.Column="0"
                Visibility="{Binding BlockOutlineVisible, Converter={x:Static TagStructEditor:BoolToVisbilityConverter.Instance}, FallbackValue=Collapsed}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition
                        Width="Auto"
                        MinWidth="120"
                        MaxWidth="300" />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <!--  Block Outline List  -->
                <ListBox
                    Grid.Column="0"
                    MinWidth="200"
                    Margin="2,0,0,0"
                    ItemsSource="{Binding BlockOutline}"
                    SelectedIndex="{Binding BlockOutlineIndex}">

                    <ListBox.Resources>
                        <DataTemplate DataType="{x:Type local:BlockOutlineItem}">
                            <TextBlock x:Name="label"
                                Foreground="{DynamicResource Foreground}"
                                Text="{Binding Header}" />
                        </DataTemplate>
                    </ListBox.Resources>
                </ListBox>
                <GridSplitter
                    Grid.Column="1"
                    Width="5"
                    Background="Transparent"
                    ResizeBehavior="PreviousAndCurrent" />
            </Grid>

            <!--  Template Display  -->
            <TagStructEditor:StructEditorControl x:Name="structContainer"
                Grid.Column="1"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                Field="{Binding DisplayField}"
                FocusedField="{Binding SearchResultField}"
                IsVirtualizing="True" />
        </Grid>
    </DockPanel>

</UserControl>
